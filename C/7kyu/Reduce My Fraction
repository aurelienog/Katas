My solution:

typedef struct Fraction {
  int numerator;
  int denominator;
} pair;

pair my_fraction(pair fraction) {
    
  pair result = {
      .numerator = fraction.numerator,
      .denominator = fraction.denominator,
    };

  
  while(result.denominator != 0){
    int remainder = result.numerator % result.denominator;
    result.numerator = result.denominator;
    result.denominator = remainder;
  }
  
  fraction.numerator /= result.numerator;
  fraction.denominator /= result.numerator;
  
  return fraction;
}

Description:
Write a function which reduces fractions to their simplest form! Fractions will be presented as an array/tuple (depending on the language) of strictly positive integers, and the reduced fraction must be returned as an array/tuple:

input:   [numerator, denominator]
output:  [reduced numerator, reduced denominator]
example: [45, 120] --> [3, 8]
All numerators and denominators will be positive integers.
